--- a/chrome/browser/media/webrtc/capture_policy_utils.cc
+++ b/chrome/browser/media/webrtc/capture_policy_utils.cc
@@ -141,69 +141,12 @@ void RegisterProfilePrefs(PrefRegistrySi
 }
 
 bool IsGetAllScreensMediaAllowedForAnySite(content::BrowserContext* context) {
-#if BUILDFLAG(IS_CHROMEOS)
-  Profile* profile = Profile::FromBrowserContext(context);
-  if (!profile) {
-    return false;
-  }
-
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // To ensure that a user is informed at login time that capturing of all
-  // screens can happen (for privacy reasons), this API is only available on
-  // primary profiles.
-  if (!profile->IsMainProfile()) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-
-  HostContentSettingsMap* host_content_settings_map =
-      HostContentSettingsMapFactory::GetForProfile(profile);
-  if (!host_content_settings_map) {
-    return false;
-  }
-  ContentSettingsForOneType content_settings =
-      host_content_settings_map->GetSettingsForOneType(
-          ContentSettingsType::ALL_SCREEN_CAPTURE);
-  return base::ranges::any_of(content_settings,
-                              [](const ContentSettingPatternSource& source) {
-                                return source.GetContentSetting() ==
-                                       ContentSetting::CONTENT_SETTING_ALLOW;
-                              });
-#else
   return false;
-#endif
 }
 
 bool IsGetAllScreensMediaAllowed(content::BrowserContext* context,
                                  const GURL& url) {
-#if BUILDFLAG(IS_CHROMEOS)
-  Profile* profile = Profile::FromBrowserContext(context);
-  if (!profile) {
-    return false;
-  }
-
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // To ensure that a user is informed at login time that capturing of all
-  // screens can happen (for privacy reasons), this API is only available on
-  // primary profiles.
-  if (!profile->IsMainProfile()) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-
-  HostContentSettingsMap* host_content_settings_map =
-      HostContentSettingsMapFactory::GetForProfile(profile);
-  if (!host_content_settings_map) {
-    return false;
-  }
-  ContentSetting auto_accept_enabled =
-      host_content_settings_map->GetContentSetting(
-          url, url, ContentSettingsType::ALL_SCREEN_CAPTURE);
-  return auto_accept_enabled == ContentSetting::CONTENT_SETTING_ALLOW;
-#else
-  // This API is currently only available on ChromeOS and Linux.
   return false;
-#endif
 }
 
 #if !BUILDFLAG(IS_ANDROID)
